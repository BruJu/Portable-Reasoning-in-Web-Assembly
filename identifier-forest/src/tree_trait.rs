//! Defines the API for a tree

use crate::Identifier;

/// An iterator over an array of 4 identifiers
pub type Tree4Iterator<'a, I> = Box<dyn Iterator<Item = [I; 4]> + 'a>;

/// A structure that can be instanciated by forcing it to be a real structure
/// or that can be lazy, depending on the used constructor.
///
/// It also does not require extra parameters.
pub trait LazyStructure {
    /// Builds an instance.
    fn new() -> Self;

    /// Builds an instance. The instance must be able to receive data.
    fn new_instanciated() -> Self;    
}

/// A queryable tree. On initialization, it is not required to be able to
/// receive new data.
///
/// The tree may not exist, but should be spawnable.
/// 
/// Trees are not actually enforced: implementing this trait using a sorted
/// array would be a valid implementation.
pub trait MaybeTree4<I>
where I: Identifier
{
    /// Returns true if this true is able to store data
    fn exists(&self) -> bool;

    /// If this tree is not yet instanciated, builds a new tree and populate it
    /// with the data generated by f
    fn ensure_exists<'a, F>(&mut self, f: F) where F: FnOnce() -> Tree4Iterator<'a, I>;

    /// Returns an iterator on every quads in the tree, that matches the given
    /// pattern
    fn get_quads<'a>(&'a self, pattern: [Option<I>; 4]) -> Tree4Iterator<'a, I>;

    /// Returns the index conformance (TODO)
    ///
    /// If can_build is true the result is always something, else it is None if
    /// this tree does not exists yet.
    fn index_conformance(&self, can_build: bool, pattern_layout: &[Option<I>; 4]) -> Option<usize>;

    /// Eventually inserts the quad, Returns true if the quad wasn't already present.
    /// If the set did not have this value present, true is returned.
    fn insert(&mut self, id_quad: &[I; 4]) -> Option<bool>;

    /// Eventually delete the quads. 
    fn delete(&mut self, id_quad: &[I; 4]) -> Option<bool>;

    /// Returns the number of stored quads
    fn size(&self) -> Option<usize>;

    /// Returns true if the quad is in the tree
    fn has(&self, id_quad: &[I; 4]) -> Option<bool>;
}
