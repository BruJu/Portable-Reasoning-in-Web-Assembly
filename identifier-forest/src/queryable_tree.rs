


/// An iterator over an array of 4 identifiers
pub type Iterator4Identifiers<I>
where I: Identifier
= Box<dyn Iterator<Item = [I; 4]> + 'a>;


pub trait EnumerableQueryableOnceCellTree4<I>//: QueryableOnceCellTree4<I>
where I: Identifier {
    /// Builds an instance.
    pub fn new() -> Self;

    /// Builds an instance. The instance must be able to receie dat.
    pub fn new_instanciated() -> Self;    
}

/*
/// A queryable tree. On initialization, it is not required to be able to
/// receive new data.
///
/// The tree may not exist, but should be spawnable.
pub trait QueryableOnceCellTree4<I>
where I: Identifier
{
    /// Returns true if this true is able to store data
    pub fn exists(&self) -> bool;

    /// If this tree is not yet instanciated, builds a new tree and populate it
    /// with the data generated by f
    pub fn ensure_exists<T>(&mut self, f: F) where F: FnOnce() -> impl TreeIterator<'a, I>;

    /// Returns an iterator on every quads in the tree, that matches the given
    /// pattern
    pub fn get_quads<'a>(&'a self, pattern: [Option<I>; 4]) -> Iterator4Identifiers;

    /// Returns the index conformance (TODO)
    ///
    /// If can_build is true the result is always something, else it is None if
    /// this tree does not exists yet.
    pub fn index_conformance(&self, can_build: bool, pattern_layout: &[Option<I>; 4]) -> Option<usize>;

    /// Eventually inserts the quad, Returns true if the quad wasn't already present.
    /// If the set did not have this value present, true is returned.
    pub fn insert(&mut self, id_quad: &[I; 4]) -> Option<bool>;

    /// Eventually delete the quads. 
    pub fn delete(&mut self, id_quad: &[I; 4]) -> Option<bool>;

    /// Returns the number of stored quads
    pub fn size(&self) -> Option<usize>;

    /// Returns true if the quad is in the tree
    pub fn has(&self, id_quad: &[I; 4]) -> Option<bool>;
}


*/