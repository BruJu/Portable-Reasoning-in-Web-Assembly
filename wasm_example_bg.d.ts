/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_jsdataset_free(a: number): void;
export function jsdataset_new(): number;
export function jsdataset_cloneFactory(a: number): number;
export function jsdataset_load(a: number, b: number, c: number): void;
export function jsdataset_getTerms(a: number): number;
export function jsdataset_add(a: number, b: number): void;
export function jsdataset_delete(a: number, b: number): void;
export function jsdataset_has(a: number, b: number): number;
export function jsdataset_match(a: number, b: number, c: number, d: number, e: number): number;
export function __wbg_term_free(a: number): void;
export function term_is_connected_to_rust(a: number): number;
export function term_term_type(a: number, b: number): void;
export function term_value(a: number, b: number): void;
export function term_set_value(a: number, b: number, c: number): void;
export function term_language(a: number, b: number): void;
export function term_set_language(a: number, b: number, c: number): void;
export function term_datatype(a: number): number;
export function term_set_datatype(a: number, b: number): void;
export function term_equals(a: number, b: number): number;
export function term_toString(a: number, b: number): void;
export function jsdataset_quads(a: number): number;
export function __wbg_quad_free(a: number): void;
export function quad_is_connected_to_rust(a: number): number;
export function quad_subject(a: number): number;
export function quad_predicate(a: number): number;
export function quad_object(a: number): number;
export function quad_graph(a: number): number;
export function quad_toString(a: number, b: number): void;
export function quad_equals(a: number, b: number): number;
export function quad_set_subject(a: number, b: number): void;
export function quad_set_predicate(a: number, b: number): void;
export function quad_set_object(a: number, b: number): void;
export function quad_set_graph(a: number, b: number): void;
export function __wbg_datafactory_free(a: number): void;
export function datafactory_new(): number;
export function datafactory_namedNode(a: number, b: number, c: number): number;
export function datafactory_blankNode(a: number, b: number, c: number): number;
export function datafactory_literalFromString(a: number, b: number, c: number, d: number, e: number): number;
export function datafactory_literalFromNamedNode(a: number, b: number, c: number, d: number): number;
export function datafactory_variable(a: number, b: number, c: number): number;
export function datafactory_defaultGraph(a: number): number;
export function datafactory_quad(a: number, b: number, c: number, d: number, e: number): number;
export function datafactory_fromTerm(a: number, b: number): number;
export function datafactory_fromQuad(a: number, b: number): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_free(a: number, b: number): void;
